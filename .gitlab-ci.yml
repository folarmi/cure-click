stages:
  - build_project
  - build_and_push_image
  - deploy_static
  - deploy_image

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_NAME: $(echo "cureclick-frontend-$CI_COMMIT_REF_NAME" | tr '.' '-')
  DOCKER_REGISTRY: registry.gitlab.com/biyartech1/cure-click-apps/cure-click-frontend:$CI_COMMIT_REF_NAME
  DOCKER_REGISTRY_SERVER: "registry.gitlab.com"
  STATIC_ARTIFACT_NAME: cureclick-frontend-static

cache:
  paths:
    - node_modules/

build_project:
  stage: build_project
  image: node:18-alpine
  script:
    - echo "CI_COMMIT_REF_NAME - $CI_COMMIT_REF_NAME"
    - echo "Installing dependencies..."
    - npm install
    - echo "Building the React app..."
    - npm run build
    - echo "Creating WEB-INF directory..."
    - mkdir -p dist/WEB-INF
    - cp public/web.xml dist/WEB-INF/web.xml
    - echo "Build completed. Listing files..."
    - ls -la
    - ls -la dist
    - ls -la dist/WEB-INF
  artifacts:
    paths:
      - dist/
    expire_in: 1 week

build_image:
  stage: build_and_push_image
  only:
    - main
  script:
    - echo "Logging into Docker registry..."
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $DOCKER_REGISTRY_SERVER
    - echo "Building Docker image..."
    - docker build -t $DOCKER_REGISTRY .
    - echo "Pushing Docker image..."
    - docker push "$DOCKER_REGISTRY"
    - echo "Docker image $DOCKER_REGISTRY built and pushed successfully."

deploy_static_files:
  stage: deploy_static
  tags:
    - windows
  except:
    - main
  script:
    - echo "Exporting Static files"
    - ls -Force
    - echo "Deploying files to Tomcat"
    - |
      $TOMCAT_DIR = "C:\Program Files\Apache Software Foundation\Tomcat 11.0_Tomcat\webapps\ROOT"
      $OUT_DIR = "dist"

      # Ensure TOMCAT_DIR exists
      if (-Not (Test-Path -Path $TOMCAT_DIR)) {
          Write-Host "Directory does not exist. Creating: $TOMCAT_DIR"
          New-Item -ItemType Directory -Path $TOMCAT_DIR -Force | Out-Null
      }

      # Remove existing files except WEB-INF if it exists
      Write-Host "Cleaning Tomcat directory (preserving WEB-INF)"
      Get-ChildItem -Path $TOMCAT_DIR -Exclude 'WEB-INF' | Remove-Item -Recurse -Force

      # Copy new files
      Write-Host "Copying new files to $TOMCAT_DIR"
      Copy-Item "$OUT_DIR\*" -Destination $TOMCAT_DIR -Recurse -Force

      # Ensure web.xml is properly placed
      if (Test-Path "$OUT_DIR\WEB-INF\web.xml") {
          if (-Not (Test-Path "$TOMCAT_DIR\WEB-INF")) {
              New-Item -ItemType Directory -Path "$TOMCAT_DIR\WEB-INF" -Force | Out-Null
          }
          Copy-Item "$OUT_DIR\WEB-INF\web.xml" -Destination "$TOMCAT_DIR\WEB-INF\" -Force
          Write-Host "web.xml deployed to WEB-INF directory"
      }

      Write-Host "Deployment to Tomcat completed successfully."
